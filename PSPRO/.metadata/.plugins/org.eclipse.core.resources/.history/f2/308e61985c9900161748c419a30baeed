import java.util.ArrayList;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

class Cuenta{
	
	private double valor = 0;
	
	public double getValor(){
		
		return valor;
	}
	
	public void sumValor(double v){
		
		this.valor += v;
	}
	
}

public class Supermercado {
	
	public static Cuenta cuentantaFinal = new Cuenta();
	public static Caja[] cajas;
	public static ArrayList<Cliente> clientes;
	public static AtomicLong tiempoDeAtencion = new AtomicLong(0);
	public static boolean abierto = true;
	
	
	public static void main(String[] srgs){
		
		obtenerDatos();
		
	}

	private static void obtenerDatos() {
		
		int nCajas = 0;
		int nClientes = 0;
		Scanner scanner = new Scanner(System.in);
		boolean nClientesValido = false;
		boolean nCajasValido = false;
		String opClientes;
		String opCajas;
		
		//Obtenemos los datos del usuario
		while (!nClientesValido) {
			System.out.println("Introduce el número de clientes");
			opClientes = scanner.nextLine();
		   		   
		   try{
			   
			   nClientes = Integer.parseInt(opClientes);
			   
			   if(nClientes < 1){
				   
				   System.out.println("Al menos un cliente hombre");
				   
			   }else {
				   
				   nClientesValido = true;
			   }
			   
		   }catch(NumberFormatException e){
			   
			   System.out.println("Eso no es un número");
		   }
		
	   }
		
		while (!nCajasValido) {
			System.out.println("Introduce el número de cajas");
			opCajas = scanner.nextLine();
		   		   
		   try{
			   
			   nClientes = Integer.parseInt(opCajas);
			   
			   if(nClientes < 1){
				   
				   System.out.println("Al menos una caja hombre");
				   
			   }else {
				   
				   nCajasValido = true;
			   }
			   
		   }catch(NumberFormatException e){
			   
			   System.out.println("Eso no es un número");
		   }
		
	   }
		
		abrirSuper(nClientes, nCajas);
		
		
	}

	private static void abrirSuper(int nClientes, int nCajas) {
		
		cajas = new Caja[nCajas];
		clientes = new ArrayList<Cliente>();
		Cliente cliente;
		int recaudacionTotal = 0;
		
		//Prepara las cajas
		for(int i = 0; i < cajas.length; i++){
			
			cajas[i] = new Caja(cuentantaFinal, i+1);
			cajas[i].start();
			
		}
		
		//Prepara los clientes
		for(int i = 0; i < nClientes; i++){
			
			cliente = new Cliente(i+1);
			clientes.add(cliente);
			cliente.start();			
		}
		
		//Solo hay que esperar a las cajas
		for(int i = 0; i < cajas.length; i++){
			
			try {
				cajas[i].join();
			} catch (InterruptedException e) {
				//???
			}
			
		}
		
		//Recorre las cajas para ver su recaudacion
		
		for(int i = 0; i < cajas.length; i++){
			
			System.out.println("La caja "+cajas[i].getNCaja()+" recaudo: "+cajas[i].getRecaudacion());
			recaudacionTotal += cajas[i].getRecaudacion();
		}
		
		System.out.println("La recaudacion total asciende a: "+recaudacionTotal);
		
		if(recaudacionTotal != cuentantaFinal.getValor()){
			
			System.out.println("No hay fallos en las sumas");
			
		}else{
			
			System.out.println("Hay fallos en las sumas");
		}
		
		
	}
	
}
