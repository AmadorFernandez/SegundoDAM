import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class ProcessUnited {
	
	
	public static final String[] FIRSTCOMAND = new String[] {"ls", "-la"};
	public static final String SECONDCOMAND = "grep";
	public static final String INCORRET_NUMBER_DATA = "Se pide ruta a la carpeta seguido de la cadena de filtro";
	public static final String MSG_ERROR_IO = "Se produjo el siguiente error de I/O: ";
	public static final String CODIFY = "UTF-8";
	
	
	public static void main(String[] args) {
		
		if(args.length == 2){
			
			start(args);
			
			
		}else{
			
			System.out.println(INCORRET_NUMBER_DATA);
		}
		

	}


	private static void start(String[] args) {
		
		
		String resultA = "";
		String resultB = "";
		Process processA = null;
		Process processB = null;
		ProcessBuilder procesOne = null;
		ProcessBuilder procesTwo = null;
		BufferedReader exitOne = null;
		BufferedWriter entryTwo = null;
		BufferedReader exitTwo = null;
		
		
		// Allocate memory to processes
		procesOne = new ProcessBuilder(FIRSTCOMAND[0], FIRSTCOMAND[1], args[1]);
		procesTwo = new ProcessBuilder(args[1]);
		
		
		
	
		
		try {
			
			// the processes are started (The second you wait to enter data first) and
			// they are link flows reading Input Output
			
			processA = procesOne.start();
			processB = procesTwo.start();
			exitOne = new BufferedReader(new InputStreamReader(processA.getInputStream(), CODIFY));
			entryTwo = new BufferedWriter(new OutputStreamWriter(processB.getOutputStream(), CODIFY));
			
			//Close Stream
			
			exitOne.close();
			entryTwo.close();
			
			
			//	Passes the data obtained the input of the second process
			
			while ((resultA = exitOne.readLine()) != null) {
				
				entryTwo.write(resultA+" ");
				
			}
			
			//Close Stream
			exitOne.close();
			entryTwo.close();
			
			//Obtain the exit of processB
			exitTwo = new BufferedReader(new InputStreamReader(processB.getInputStream(), CODIFY));
			
			//Pass the obtained data to The console
			
			while ((resultB = exitTwo.readLine()) != null) {
				
				System.out.println(resultB);
				
			}
			
			exitTwo.close();
			
			
			
			
			
		} catch (IOException e) {
			
			System.err.println(MSG_ERROR_IO + e.getMessage());
		}
		
		
		
		
		
		
		
		
		
		
	}

}
