
public class Filosofo extends Thread {
	private Cena laCena;
	private int pizq;
	private int pder;
	private int numero;
	private int veces;
	
	public Filosofo(int x, int veces, Cena cena) {
		this.numero = x;
		this.veces = veces;
		this.laCena = cena;
		pizq = laCena.getPalilloI(x);
		pder = laCena.getPalilloD(x);
	}
	
	public void pensar() {
		System.out.println("El filósofo " + numero + " está pensando");
		try {
			Thread.sleep((int)(1 + (Math.random() * 1000)));
		} catch (InterruptedException e) { e.printStackTrace(); }
		System.out.println("El filósofo " + numero + " tiene hambre");
	}
	
	public void cogerPalillos() {
		if (numero % 2 == 0) {
			laCena.getPalillo(pizq).coger();
			laCena.getPalillo(pder).coger();
		}
		else {
			laCena.getPalillo(pder).coger();
			laCena.getPalillo(pizq).coger();
		}
	}
	
	public void comer() {
		System.out.println("Filósofo " + numero + " está comiendo");
		try {
			Thread.sleep((int)(1 + (Math.random() * 2000)));
		} catch (InterruptedException e) { e.printStackTrace(); }
		System.out.println("El filósofo " + numero + " ha terminado de comer");
	}
	
	public void soltarPalillos() {
		System.out.println("El filósofo " + numero + " deja los palillos");
		laCena.getPalillo(pizq).soltar();
		laCena.getPalillo(pder).soltar();
	}
	
	@Override
	public void run() {
		for (int i = 0; i < veces; i++) {
			pensar();
			cogerPalillos();
			comer();
			soltarPalillos();
		}
	}
}
