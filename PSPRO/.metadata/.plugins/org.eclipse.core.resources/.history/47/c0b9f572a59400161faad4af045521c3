import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Principal {
	
	public static int contador = 0;

	public static void main(String[] args) throws InterruptedException {
		
		
		Sumador sumador = new Sumador();
		Sumador sumador2 = new Sumador();
		
	    Operadorcete operadorcete = new Operadorcete(sumador);
	    Operadorcete operadorcete2 = new Operadorcete(sumador2);
	    
	    operadorcete.start();
	    operadorcete2.start();
	    operadorcete.join();
	    operadorcete2.join();
	
		
		System.out.println("El contador vale: "+contador);
		
		

	}

}

class Operadorcete extends Thread{
	 
	
	private Sumador sumador;
	
	public Operadorcete(Sumador s){
		
		this.sumador = s;
		
	}
	
	public void run() {
		
		

			
			sumador.sumar();
			
		
		
		
		
		
	}
	
	
}

class Sumador {
	

	Lock bLoc = new ReentrantLock();
    
	public void sumar() {
		
           bLoc.lock();
           
           try{
			
			for (int i = 0; i < 1000; i++) {
				
				Principal.contador++;
				
			
		}
			
           }finally{
        	   
        	   bLoc.unlock();
           }
				
	}
    
    
	
    
}
